// build a map of the dependency artifacts to use. Allows centralized definition
// of the version of artifacts to use.  In that respect it serves a role similar
// to <dependencyManagement> in Maven

ext {
  useOpenOffice = project.hasProperty('useOpenOffice')
  libraries = [

    // Apache Commons Libraries
    commons_cli                        : "commons-cli:commons-cli:$commonsCliVersion",
    commons_fileupload                 : "commons-fileupload:commons-fileupload:$commonsFileUploadVersion",
    commons_io                         : "commons-io:commons-io:$commonsIoVersion",
    commons_lang3                      : "org.apache.commons:commons-lang3:$commonsLang3Version",

    // Office Libraries (OpenOffice)
    office_juh                         : "org.openoffice:juh:$openOfficeVersion",
    office_jurt                        : "org.openoffice:jurt:$openOfficeVersion",
    office_ridl                        : "org.openoffice:ridl:$openOfficeVersion",
    office_unoil                       : "org.openoffice:unoil:$openOfficeVersion",

    // Spring Libraries
    spring_core                        : "org.springframework:spring-core:$springVersion",
    spring_context                     : "org.springframework:spring-context:$springVersion",
    spring_test                        : "org.springframework:spring-test:$springVersion",
    spring_context                     : "org.springframework:spring-context:$springVersion",

    // Spring Boot libraries
    spring_boot_dependencies           : "org.springframework.boot:spring-boot-dependencies:$springBootVersion",
    spring_boot_starter                : 'org.springframework.boot:spring-boot-starter',
    spring_boot_configuration_processor: 'org.springframework.boot:spring-boot-configuration-processor',
    spring_boot_starter_test           : 'org.springframework.boot:spring-boot-starter-test',

    // HTTP Components libraries
    httpcomponents_httpcore            : "org.apache.httpcomponents:httpcore:$httpcomponentsCoreVersion",
    httpcomponents_httpclient          : "org.apache.httpcomponents:httpclient:$httpcomponentsClientVersion",
    httpcomponents_httpmime            : "org.apache.httpcomponents:httpmime:$httpcomponentsMimeVersion",

    // Logging Libraries
    slf4j_api                          : "org.slf4j:slf4j-api:$slf4jVersion",
    slf4j_log4j                        : "org.slf4j:slf4j-log4j12:$slf4jVersion",

    // Other Libraries
    gson                               : "com.google.code.gson:gson:$gsonVersion",
    servlet_api                        : "javax.servlet:javax.servlet-api:$servletApiVersion",

    // Tests
    assertj                            : "org.assertj:assertj-core:$assertjVersion",
    equalsverifier                     : "nl.jqno.equalsverifier:equalsverifier:$equalsverifierVersion",
    junit                              : "junit:junit:$junitVersion",
    jsr305                             : "com.google.code.findbugs:jsr305:$findbugsVersion",
    findbugs                           : "com.google.code.findbugs:findbugs:$findbugsVersion",
    mockito                            : "org.mockito:mockito-core:$mockitoVersion",
    powermock_junit                    : "org.powermock:powermock-module-junit4:$powermockVersion",
    powermock_mockito                  : "org.powermock:powermock-api-mockito2:$powermockVersion",
    wiremock                           : "com.github.tomakehurst:wiremock:$wiremockVersion"
  ]
}